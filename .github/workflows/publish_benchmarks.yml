name: Publish Benchmarks

on:
  workflow_run:
    workflows: ["Benchmark"]
    types:
      - completed

jobs:
  publish_benchmarks:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && 'benchmark' || '' }}

    permissions:
      pull-requests: write
      actions: read
      contents: read

    strategy:
      matrix:
        include:
          - benchmark-file: kernel/.github/benchmarks/general.yaml
            benchmark-matrix-name: General
          - benchmark-file: kernel/.github/benchmarks/misc.yaml
            benchmark-matrix-name: Misc

    steps:
    - name: 'Download artifact from another workflow'
      uses: actions/github-script@v5
      with:
        script: |
          const https = require('https');
          const fs = require('fs');
          const { promisify } = require('util');
          const stream = require('stream');
          const pipeline = promisify(stream.pipeline);

          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.payload.workflow_run.id,
          });

          console.log("Available artifacts:", artifacts.data.artifacts.map(a => a.name));

          const artifact = artifacts.data.artifacts.find(a =>
            a.name === `${{ matrix.benchmark-matrix-name }}-benchmark-results`
          );

          if (!artifact) {
            throw new Error("Artifact not found");
          }

          console.log(`Found artifact: ${artifact.name} (ID: ${artifact.id})`);

          const res = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: artifact.id,
            archive_format: 'zip',
          });

          const url = res.url;

          console.log(`Redirect URL: ${url}`);

          await new Promise((resolve, reject) => {
            https.get(url, response => {
              if (response.statusCode !== 200) {
                return reject(new Error(`Failed to download artifact. Status: ${response.statusCode}`));
              }

              const fileStream = fs.createWriteStream(`${process.env.GITHUB_WORKSPACE}/results.zip`);
              response.pipe(fileStream);
              fileStream.on('finish', () => {
                fileStream.close(resolve);
              });
            }).on('error', reject);
          });

          console.log("Artifact downloaded successfully.");
    - name: 'Unzip artifact'
      run: unzip results.zip
    - name: Store benchmark results
      uses: hermit-os/github-action-benchmark@main
      with:
        tool: "hermit-bench"
        output-file-path: results.json
        github-token: ${{ github.event_name == 'push' && secrets.HERMIT_BENCH_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        benchmark-data-dir-path: .
        gh-repository: github.com/CarlWachter/hermit-bench
        comment-always: true
        benchmark-matrix-name: ${{ matrix.benchmark-matrix-name }}
        auto-push: ${{ github.event_name == 'push' }}